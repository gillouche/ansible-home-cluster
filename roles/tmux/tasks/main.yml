---
# tasks file for tmux

- name: Install tmux (Ubuntu/Debian)
  apt:
    name: ["tmux", "xclip"]
    state: latest
  become: true
  when: ansible_facts['os_family'] == "Debian"

- name: Install tmux (Arch)
  yay:
    name: ["tmux", "xclip"]
    state: latest
  when: ansible_distribution == 'Archlinux'

- name: Create tmux plugins directory
  file:
    path: "/home/{{ target_user }}/.tmux/plugins/"
    state: directory 
    recurse: true
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: 0755
  changed_when: false
  
- name: Check if tmux plugin manager is installed
  stat: 
    path: "/home/{{ target_user }}/.tmux/plugins/tpm"
  register: tpm_directory

- name: Clone tmux plugin manager
  git:
    repo: "https://github.com/tmux-plugins/tpm"
    dest: "/home/{{ target_user }}/.tmux/plugins/tpm"
    clone: true 
    update: true
    force: true
  changed_when: false

- name: Copy tmux config
  copy: 
    src: "tmux.conf"
    dest: "/home/{{ target_user }}/.tmux.conf"

- name: Download plugins 
  shell:
    cmd: bash install_plugins.sh
    chdir: "/home/{{ target_user }}/.tmux/plugins/tpm/scripts"
  changed_when: false

- name: Check for systemd user directory
  stat:
    path: "/home/{{ target_user }}/.config/systemd/user"
  register: systemd_user_directory

- name: Create systemd user directory
  file:
    path: "/home/{{ target_user }}/.config/systemd/user"
    state: directory 
    recurse: true
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: 0755
  when: not systemd_user_directory.stat.exists

- name: Copy tmux systemd service 
  copy: 
    src: "tmux.service"
    dest: "/home/{{ target_user }}/.config/systemd/user/tmux.service"

- name: "Find uid of user"
  command: "id -u {{ target_user }}"
  register: target_user_id
  check_mode: no
  changed_when: false

- name: "Determine XDG_RUNTIME_DIR"
  set_fact:
    xdg_runtime_dir: "/run/user/{{ target_user_id.stdout }}"
  changed_when: false

- name: Start tmux
  systemd:
    name: tmux.service
    daemon_reload: true
    state: started 
    scope: user
  become: true
  become_user: "{{ target_user }}"
  environment:
    XDG_RUNTIME_DIR: "{{ xdg_runtime_dir }}"

- name: "Define role executed var {{ role_name }}_was_executed"
  set_fact:
    "{{ role_name }}_was_executed": true
    cacheable: true
